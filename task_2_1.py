from abc import ABC, abstractmethod

class Стол(ABC):
    """
    Абстрактный класс, описывающий стол.
    """

    def __init__(self, материал: str, количество_ножек: int):
        """
        Инициализация объекта "стол".
        :param материал: Материал, из которого сделан стол.
        :param количество_ножек: Количество ножек стола.
        :raises ValueError: Если количество ножек меньше 1 или больше 10.
        """
        if количество_ножек < 1 or количество_ножек > 10:
            raise ValueError("Количество ножек должно быть от 1 до 10.")
        self.материал = материал
        self.количество_ножек = количество_ножек

    @abstractmethod
    def выдержать_вес(self, вес: float) -> bool:
        """
        Проверяет, может ли стол выдержать указанный вес.
        :param вес: Вес, который нужно проверить.
        :return: True, если стол выдержит вес, иначе False.
        >>> стол = ДеревянныйСтол("дерево", 4)
        >>> стол.выдержать_вес(50)
        True
        """
        ...

    @abstractmethod
    def описание(self) -> str:
        """
        Возвращает описание стола.
        :return: Строка с описанием стола.
        >>> стол = ДеревянныйСтол("дерево", 4)
        >>> стол.описание()
        "Стол из дерева с 4 ножками."
        """
        ...


class Дерево(ABC):
    """
    Абстрактный класс, описывающий дерево.
    """

    def __init__(self, высота: float, возраст: int):
        """
        Инициализация объекта "дерево".
        :param высота: Высота дерева в метрах.
        :param возраст: Возраст дерева в годах.
        :raises ValueError: Если высота или возраст меньше или равны нулю.
        """
        if высота <= 0 or возраст <= 0:
            raise ValueError("Высота и возраст должны быть больше нуля.")
        self.высота = высота
        self.возраст = возраст

    @abstractmethod
    def расти(self, годы: int) -> None:
        """
        Увеличивает возраст дерева на указанное количество лет.
        :param годы: Количество лет, на которое увеличивается возраст дерева.
        :raises ValueError: Если количество лет меньше или равно нулю.
        >>> дерево = Дуб(10, 50)
        >>> дерево.расти(5)
        """
        ...

    @abstractmethod
    def описание(self) -> str:
        """
        Возвращает описание дерева.
        :return: Строка с описанием дерева.
        >>> дерево = Дуб(10, 50)
        >>> дерево.описание()
        "Дерево высотой 10 метров и возрастом 50 лет."
        """
        ...


class СоциальнаяСеть(ABC):
    """
    Абстрактный класс, описывающий социальную сеть.
    """

    def __init__(self, название: str, количество_пользователей: int):
        """
        Инициализация объекта "социальная сеть".
        :param название: Название социальной сети.
        :param количество_пользователей: Количество пользователей в сети.
        :raises ValueError: Если количество пользователей меньше нуля.
        """
        if количество_пользователей < 0:
            raise ValueError("Количество пользователей не может быть отрицательным.")
        self.название = название
        self.количество_пользователей = количество_пользователей

    @abstractmethod
    def добавить_пользователя(self) -> None:
        """
        Увеличивает количество пользователей на 1.
        >>> сеть = Facebook("Facebook", 2000000000)
        >>> сеть.добавить_пользователя()
        """
        ...

    @abstractmethod
    def описание(self) -> str:
        """
        Возвращает описание социальной сети.
        :return: Строка с описанием социальной сети.
        >>> сеть = Facebook("Facebook", 2000000000)
        >>> сеть.описание()
        "Социальная сеть Facebook с 2000000000 пользователей."
        """
        ...


# Примеры реализации абстрактных классов

class ДеревянныйСтол(Стол):
    def выдержать_вес(self, вес: float) -> bool:
        return вес <= 100  # Пример логики

    def описание(self) -> str:
        return f"Стол из {self.материал} с {self.количество_ножек} ножками."


class Дуб(Дерево):
    def расти(self, годы: int) -> None:
        if годы <= 0:
            raise ValueError("Годы должны быть больше нуля.")
        self.возраст += годы

    def описание(self) -> str:
        return f"Дерево высотой {self.высота} метров и возрастом {self.возраст} лет."


class Facebook(СоциальнаяСеть):
    def добавить_пользователя(self) -> None:
        self.количество_пользователей += 1

    def описание(self) -> str:
        return f"Социальная сеть {self.название} с {self.количество_пользователей} пользователей."


# Примеры использования

if __name__ == "__main__":
    # Пример использования класса ДеревянныйСтол
    стол = ДеревянныйСтол("дерево", 4)
    print(стол.описание())  # Вывод: Стол из дерева с 4 ножками.
    print(стол.выдержать_вес(50))  # Вывод: True

    # Пример использования класса Дуб
    дерево = Дуб(10, 50)
    print(дерево.описание())  # Вывод: Дерево высотой 10 метров и возрастом 50 лет.
    дерево.расти(5)
    print(дерево.описание())  # Вывод: Дерево высотой 10 метров и возрастом 55 лет.

    # Пример использования класса Facebook
    сеть = Facebook("Facebook", 2000000000)
    print(сеть.описание())  # Вывод: Социальная сеть Facebook с 2000000000 пользователей.
    сеть.добавить_пользователя()
    print(сеть.описание())  # Вывод: Социальная сеть Facebook с 2000000001 пользователей.
